using System;
using System.Net;
using HttpWebRequestWrapper.Recording;

// Justification: Public Api
// ReSharper disable MemberCanBePrivate.Global
// ReSharper disable AutoPropertyCanBeMadeGetOnly.Global

namespace HttpWebRequestWrapper
{
    /// <summary>
    /// <see cref="IWebRequestCreate"/> for <see cref="HttpWebRequestWrapperRecorder"/> - a 
    /// specialized <see cref="HttpWebRequest"/> that records http requests and responses.
    /// <para />
    /// Use this class to record complex http traffic generated by your application
    /// into <see cref="RecordingSession"/>, then serialize and save/embed 
    /// <see cref="RecordingSession"/> and use a <see cref="HttpWebRequestWrapperInterceptorCreator"/>
    /// and <see cref="RecordingSessionInterceptorRequestBuilder"/> to play back 
    /// <see cref="RecordingSession"/> in Unit or BDD tests.
    /// <para />
    /// This class is meant to be used with <see cref="HttpWebRequestWrapperSession"/>.
    /// The result of <see cref="Create"/> can be safely cast to a <see cref="HttpWebRequestWrapperRecorder"/>.
    /// </summary>
    public class HttpWebRequestWrapperRecorderCreator : IWebRequestCreate
    {
        /// <summary>
        /// Collection of <see cref="RecordedRequest"/>s collected by
        /// the <see cref="HttpWebRequestWrapperRecorder"/>s created by this <see cref="IWebRequestCreate"/>.
        /// <para />
        /// Records request method, url, headers and payload as well as the response
        /// status code, headers and body.
        /// </summary>
        public RecordingSession RecordingSession { get; set; } 

        /// <summary>
        /// Creates a <see cref="IWebRequestCreate"/> for <see cref="HttpWebRequestWrapperRecorder"/> - a 
        /// specialized <see cref="HttpWebRequest"/> that records http requests and responses.
        /// <para />
        /// Use this class to record complex http traffic generated by your application
        /// into <see cref="RecordingSession"/>, then serialize and save/embed 
        /// <see cref="RecordingSession"/> and use a <see cref="HttpWebRequestWrapperInterceptorCreator"/>
        /// and <see cref="RecordingSessionInterceptorRequestBuilder"/> to play back 
        /// <see cref="RecordingSession"/> in Unit or BDD tests.
        /// <para />
        /// This class is meant to be used with <see cref="HttpWebRequestWrapperSession"/>.
        /// The result of <see cref="Create"/> can be safely cast to a <see cref="HttpWebRequestWrapperRecorder"/>.
        /// </summary>
        public HttpWebRequestWrapperRecorderCreator()
            :this(new RecordingSession()){}

        /// <summary>
        /// Creates a <see cref="IWebRequestCreate"/> for <see cref="HttpWebRequestWrapperRecorder"/> - a 
        /// specialized <see cref="HttpWebRequest"/> that records http requests and responses.
        /// <para />
        /// Use this class to record complex http traffic generated by your application
        /// into <paramref name="recordingSession"/>, then serialize and save/embed 
        /// <see cref="RecordingSession"/> and use a <see cref="HttpWebRequestWrapperInterceptorCreator"/>
        /// and <see cref="RecordingSessionInterceptorRequestBuilder"/> to play back 
        /// <see cref="RecordingSession"/> in Unit or BDD tests.
        /// <para />
        /// This class is meant to be used with <see cref="HttpWebRequestWrapperSession"/>.
        /// The result of <see cref="Create"/> can be safely cast to a <see cref="HttpWebRequestWrapperRecorder"/>.
        /// </summary>
        /// <param name="recordingSession">
        /// Pass in a reference to an existing <see cref="RecordingSession"/>
        /// </param>
        public HttpWebRequestWrapperRecorderCreator(RecordingSession recordingSession)
        {
            RecordingSession = recordingSession;
        }

        /// <inheritdoc/>
        public WebRequest Create(Uri uri)
        {
            return new HttpWebRequestWrapperRecorder(RecordingSession, uri);
        }
    }
}